//
//  Inverse_Matrix.cpp
//  Matrix_Calculator
//
//  Created by Christine Mossiah on 9/26/16.
//  Copyright Â© 2016 Christine Mossiah. All rights reserved.
//

#include <stdio.h>
#include "Inverse_Matrix.h"

double** inverse_2X2(double A[2][2])
{
    //double inv[2][2];
    int r, c;
    double determ;
    r = 2; c = 2;
    double** inv = create_matrix(r, c);
    determ = determ_2X2(A);
    inv[0][0] = 1 / determ * A[1][1];
    inv[0][1] = 1 / determ * -(A[0][1]);
    inv[1][0] = 1 / determ * -(A[1][0]);
    inv[1][1] = 1 / determ * A[0][0];
    return inv;
    
}

double** inverse_3X3(double A[3][3])
{
    int r, c;
    double determ;
    r = 3; c = 3;
    double** inv = create_matrix(r, c);
    determ = determ_3X3(A);
    inv[0][0] = (1 / determ *(A[1][1] * A[2][2] - A[2][1] * A[1][2]));
    inv[0][1] = (1 / determ *(A[0][2] * A[2][1] - A[0][1] * A[2][2]));
    inv[0][2] = (1 / determ *(A[0][1] * A[1][2] - A[0][2] * A[1][1]));
    inv[1][0] = (1 / determ *(A[1][2] * A[2][0] - A[1][0] * A[2][2]));
    inv[1][1] = (1 / determ *(A[0][0] * A[2][2] - A[0][2] * A[2][0]));
    inv[1][2] = (1 / determ *(A[0][2] * A[1][0] - A[0][0] * A[1][2]));
    inv[2][0] = (1 / determ *(A[1][0] * A[2][1] - A[1][1] * A[2][0]));
    inv[2][1] = (1 / determ *(A[0][1] * A[2][0] - A[0][0] * A[2][1]));
    inv[2][2] = (1 / determ *(A[1][1] * A[0][0] - A[0][1] * A[1][0]));
    return inv;
}

double** inverse_4X4(double A[4][4])
{
    int r, c;
    double determ;
    r = 4; c = 4;
    double** inv = create_matrix(r, c);
    determ = determ_4X4(A);
    inv[0][0] = (1 / determ * ((A[1][2] * A[2][3] * A[3][1]) - (A[1][3] * A[2][2] * A[3][1]) + (A[1][3] * A[2][1] * A[3][2]) - (A[1][1] * A[2][3] * A[3][2]) - (A[1][2] * A[2][1] * A[3][3]) + (A[1][1] * A[2][2] * A[3][3])));
    inv[0][1] = (1 / determ * ((A[0][3] * A[2][2] * A[3][1]) - (A[0][2] * A[2][3] * A[3][1]) - (A[0][3] * A[2][1] * A[3][2]) + (A[0][1] * A[2][3] * A[3][2]) + (A[0][2] * A[2][1] * A[3][3]) - (A[0][1] * A[2][2] * A[3][3])));
    inv[0][2] = (1 / determ * ((A[0][2] * A[1][3] * A[3][1]) - (A[0][3] * A[1][2] * A[3][1]) + (A[0][3] * A[1][1] * A[3][2]) - (A[0][1] * A[1][3] * A[3][2]) - (A[0][2] * A[1][1] * A[3][3]) + (A[0][1] * A[1][2] * A[3][3])));
    inv[0][3] = (1 / determ * ((A[0][3] * A[1][2] * A[2][1]) - (A[0][2] * A[1][3] * A[2][1]) - (A[0][3] * A[1][1] * A[2][2]) + (A[0][1] * A[1][3] * A[2][2]) + (A[0][2] * A[1][1] * A[2][3]) - (A[0][1] * A[1][2] * A[2][3])));
    inv[1][0] = (1 / determ * ((A[1][3] * A[2][2] * A[3][0]) - (A[1][2] * A[2][3] * A[3][0]) - (A[1][3] * A[2][0] * A[3][2]) + (A[1][0] * A[2][3] * A[3][2]) + (A[1][2] * A[2][0] * A[3][3]) - (A[1][0] * A[2][2] * A[3][3])));
    inv[1][1] = (1 / determ * ((A[0][2] * A[2][3] * A[3][0]) - (A[0][3] * A[2][2] * A[3][0]) + (A[0][3] * A[2][0] * A[3][2]) - (A[0][0] * A[2][3] * A[3][2]) - (A[0][2] * A[2][0] * A[3][3]) + (A[0][0] * A[2][2] * A[3][3])));
    inv[1][2] = (1 / determ * ((A[0][3] * A[1][2] * A[3][0]) - (A[0][2] * A[1][3] * A[3][0]) - (A[0][3] * A[1][0] * A[3][2]) + (A[0][0] * A[1][3] * A[3][2]) + (A[0][2] * A[1][0] * A[3][3]) - (A[0][0] * A[1][2] * A[3][3])));
    inv[1][3] = (1 / determ * ((A[0][2] * A[1][3] * A[2][0]) - (A[0][3] * A[1][2] * A[2][0]) + (A[0][3] * A[1][0] * A[2][2]) - (A[0][0] * A[1][3] * A[2][2]) - (A[0][2] * A[1][0] * A[2][3]) - (A[0][0] * A[1][2] * A[2][3])));
    inv[2][0] = (1 / determ * ((A[1][1] * A[2][3] * A[3][0]) - (A[1][3] * A[2][1] * A[3][0]) + (A[1][3] * A[2][0] * A[3][1]) - (A[1][0] * A[2][3] * A[3][1]) - (A[1][1] * A[2][0] * A[3][3]) + (A[1][0] * A[2][1] * A[3][3])));
    inv[2][1] = (1 / determ * ((A[0][3] * A[2][1] * A[3][0]) - (A[0][1] * A[2][3] * A[3][0]) - (A[0][3] * A[2][0] * A[3][1]) + (A[0][0] * A[2][3] * A[3][1]) + (A[0][1] * A[2][0] * A[3][3]) - (A[0][0] * A[2][1] * A[3][3])));
    inv[2][2] = (1 / determ * ((A[0][1] * A[1][3] * A[3][0]) - (A[0][3] * A[1][1] * A[3][0]) + (A[0][3] * A[1][0] * A[3][1]) - (A[0][0] * A[1][3] * A[3][1]) - (A[0][1] * A[1][0] * A[3][3]) + (A[0][0] * A[1][1] * A[3][3])));
    inv[2][3] = (1 / determ * ((A[0][3] * A[1][1] * A[2][0]) - (A[0][1] * A[1][3] * A[2][0]) - (A[0][3] * A[1][0] * A[2][1]) + (A[0][0] * A[1][3] * A[2][1]) + (A[0][1] * A[1][0] * A[2][3]) + (A[0][0] * A[1][1] * A[2][3])));
    inv[3][0] = (1 / determ * ((A[1][2] * A[2][1] * A[3][0]) - (A[1][1] * A[2][2] * A[3][0]) - (A[1][2] * A[2][0] * A[3][1]) + (A[1][0] * A[2][2] * A[3][1]) + (A[1][1] * A[2][0] * A[3][2]) - (A[1][0] * A[2][1] * A[3][2])));
    inv[3][1] = (1 / determ * ((A[0][1] * A[2][2] * A[3][0]) - (A[0][2] * A[2][1] * A[3][0]) + (A[0][2] * A[2][0] * A[3][1]) - (A[0][0] * A[2][2] * A[3][1]) - (A[0][1] * A[2][0] * A[3][2]) + (A[0][0] * A[2][1] * A[3][2])));
    inv[3][2] = (1 / determ * ((A[0][2] * A[1][1] * A[3][0]) - (A[0][1] * A[1][2] * A[3][0]) - (A[0][2] * A[1][0] * A[3][1]) + (A[0][0] * A[1][2] * A[3][1]) + (A[0][1] * A[1][0] * A[3][2]) - (A[0][0] * A[1][1] * A[3][2])));
    inv[3][3] = (1 / determ * ((A[0][1] * A[1][2] * A[2][0]) - (A[0][2] * A[1][1] * A[2][0]) + (A[0][2] * A[1][0] * A[2][1]) - (A[0][0] * A[1][2] * A[2][1]) - (A[0][1] * A[1][0] * A[2][2]) + (A[0][0] * A[1][1] * A[2][2])));
    return inv;
}
